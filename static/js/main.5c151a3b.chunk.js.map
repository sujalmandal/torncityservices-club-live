{"version":3,"sources":["features/profile-view/NotLoggedInViewSlice.js","features/shared-vars/SharedCacheSlice.js","features/profile-view/NotLoggedInView.js","features/profile-view/LoggedInViewSlice.js","features/profile-view/LoggedInView.js","features/job-post-view/JobPostViewSlice.js","features/job-post-view/JobPostView.js","features/job-search-bar/JobSearchBarSlice.js","features/job-search-bar/JobSearchBar.js","features/job-list-table/JobListTableSlice.js","features/job-list-table/JobListTable.js","features/shared-vars/SharedCache.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["notLoggedInViewSlice","createSlice","name","initialState","reducers","login","state","action","actions","sharedCacheSlice","apiKey","subscriberType","tornPlayerName","tornPlayerId","playerId","isLoggedIn","updateApiKey","payload","selectPlayerInfo","sharedCache","NotLoggedInView","dispatch","useDispatch","globalPlayerInfo","useSelector","useState","lgShow","setLgShow","Button","style","minWidth","onClick","variant","Modal","show","onHide","aria-labelledby","centered","Header","closeButton","Title","id","Body","Container","Form","inline","FormControl","defaultValue","type","className","onChange","e","target","value","loggedInViewSlice","logout","LoggedInView","NavDropdown","title","Item","Divider","JobPostViewSlice","postNewJob","JobPostView","showJobPostForm","setShowJobPostForm","createJobDTO","backdrop","Footer","jobSearchBarSlice","jobType","pay","amount","postedBefore","searchJobs","console","log","jobFilters","selectGlobalJobFilters","jobSearchBar","selectIsLoggedIn","JobSearchBar","globalIsLoggedIn","setJobFilters","Navbar","fixed","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","paddingLeft","Col","Label","color","onSelect","jobTypeParam","eventKey","width","max","step","paddingRight","Row","jobListTableSlice","getDetails","selectJobs","jobListTable","jobs","JobListTable","globalJobs","height","background","minHeight","paddingTop","CardColumns","map","job","index","Card","body","inverse","backgroundColor","borderColor","CardTitle","tag","CardText","targetPlayerName","SharedCache","App","useEffect","document","configureStore","reducer","jobSearchBarReducer","jobListTableReducer","notLoggedInView","notLoggedInViewReducer","jobPostView","jobPostViewReducer","sharedCacheReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c151a3b.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const notLoggedInViewSlice = createSlice({\r\n    name: 'notLoggedInView',\r\n    initialState: {\r\n       \r\n    },\r\n    reducers: {\r\n      login: (state,action) => {\r\n        \r\n      }\r\n    },\r\n  });\r\n\r\nexport const {login} = notLoggedInViewSlice.actions;\r\nexport default notLoggedInViewSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const sharedCacheSlice = createSlice({\r\n    name: 'sharedCache',\r\n    initialState: {\r\n          apiKey: \"\",\r\n          subscriberType: \"\",\r\n          tornPlayerName: \"transhumanist\",\r\n          tornPlayerId: \"\",\r\n          playerId: \"\",\r\n          isLoggedIn: false\r\n    },\r\n    reducers: {\r\n      updateApiKey: (state,action) => {\r\n            state.apiKey=action.payload;\r\n      }\r\n    }\r\n  });\r\n\r\n  export const {updateApiKey} = sharedCacheSlice.actions;\r\n  export const selectPlayerInfo = (state) => state.sharedCache;\r\n\r\n  export default sharedCacheSlice.reducer;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Button, Modal,Form, FormControl, Container } from 'react-bootstrap';\r\nimport { login } from './NotLoggedInViewSlice';\r\nimport {\r\n    updateApiKey,\r\n    selectPlayerInfo\r\n} from '../shared-vars/SharedCacheSlice';\r\n\r\nexport function NotLoggedInView() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    /* redux, global states */\r\n    const globalPlayerInfo = useSelector(selectPlayerInfo);\r\n\r\n    const [lgShow, setLgShow] = useState(false);\r\n\r\n    const setAPIKey = function(e){\r\n        dispatch(updateApiKey(e.target.value))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button style={{minWidth:\"5vw\"}} onClick={() => setLgShow(true)} variant=\"outline-success\" >Login</Button>\r\n            <Modal\r\n                show={lgShow}\r\n                onHide={() => setLgShow(false)}\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                >\r\n               \r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"example-modal-sizes-title-lg\">Login with your torn API key</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    <Container>\r\n\r\n                    <Form inline>\r\n                        <FormControl  defaultValue={globalPlayerInfo.apiKey} type=\"text\" className=\"mr-sm-4\" onChange={setAPIKey} />\r\n                        <Button onClick={()=>{dispatch(login())}}variant=\"outline-success\" >Login!</Button>\r\n                    </Form>\r\n                    </Container>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    );\r\n\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const loggedInViewSlice = createSlice({\r\n    name: 'notLoggedInView',\r\n    initialState: {\r\n        \r\n    },\r\n    reducers: {\r\n      logout: (state,action) => {\r\n        \r\n      }\r\n    },\r\n  });\r\n\r\nexport const {logout} = loggedInViewSlice.actions;\r\nexport default loggedInViewSlice.reducer;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Button, NavDropdown } from 'react-bootstrap';\r\nimport { logout } from './LoggedInViewSlice';\r\nimport { selectPlayerInfo } from '../shared-vars/SharedCacheSlice';\r\n\r\nexport function LoggedInView() {\r\n\r\n    const globalPlayerInfo = useSelector(selectPlayerInfo);\r\n    const dispatch = useDispatch();\r\n    \r\n    return (\r\n        <div>\r\n            <NavDropdown title={globalPlayerInfo.tornPlayerName} id=\"basic-nav-dropdown\">\r\n                <NavDropdown.Item>Accepted Jobs</NavDropdown.Item>\r\n                <NavDropdown.Item>Posted Jobs</NavDropdown.Item>\r\n                <NavDropdown.Divider/>\r\n                <NavDropdown.Item>\r\n                    <Button variant=\"outline-danger\" onClick={()=>{dispatch(logout())}}>Logout</Button>\r\n                </NavDropdown.Item>\r\n            </NavDropdown>\r\n        </div>\r\n    );\r\n\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const JobPostViewSlice = createSlice({\r\n    name: 'jobPostView',\r\n    initialState: {\r\n      \r\n    },\r\n    reducers: {\r\n      postNewJob: (state,action) => {\r\n        \r\n      }\r\n    }\r\n  });\r\n\r\nexport const {postNewJob} = JobPostViewSlice.actions;\r\nexport default JobPostViewSlice.reducer;","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, Modal,Form, FormControl, Container } from 'react-bootstrap';\r\nimport {\r\n    postNewJob\r\n} from './JobPostViewSlice';\r\n\r\nexport function JobPostView() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [showJobPostForm, setShowJobPostForm] = useState(false);\r\n    const [createJobDTO, setCreateJobDTO] = useState({\r\n        \r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={() => { setShowJobPostForm(true) }} variant=\"outline-success\" >Post a new job</Button>\r\n            <Modal\r\n                show={showJobPostForm}\r\n                onHide={() => { setShowJobPostForm(false) }}\r\n                backdrop=\"static\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Modal title</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => { setShowJobPostForm(false) }}>Cancel</Button>\r\n                <Button variant=\"primary\" onClick={()=>(dispatch(postNewJob(createJobDTO)))}>Post!</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const jobSearchBarSlice = createSlice({\r\n    name: 'jobSearchBar',\r\n    initialState: {\r\n        \"jobFilters\":{\r\n          jobType:\"\",\r\n          pay:0,\r\n          amount:0,\r\n          postedBefore:\"\"\r\n      }\r\n    },\r\n    reducers: {\r\n      searchJobs: (state,action) => {\r\n        console.log(action)\r\n        state.jobFilters = action.payload;\r\n      }\r\n    },\r\n  });\r\n\r\nexport const selectGlobalJobFilters = (state) => state.jobSearchBar.jobFilters;\r\nexport const selectIsLoggedIn =(state) => state.sharedCache.isLoggedIn;\r\nexport const {searchJobs} = jobSearchBarSlice.actions;\r\nexport default jobSearchBarSlice.reducer;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button, Col, Row } from 'react-bootstrap';\r\nimport { NotLoggedInView } from '../profile-view/NotLoggedInView';\r\nimport { LoggedInView } from '../profile-view/LoggedInView';\r\nimport { JobPostView } from '../job-post-view/JobPostView';\r\nimport {\r\n    searchJobs,\r\n    selectGlobalJobFilters,\r\n    selectIsLoggedIn\r\n} from './JobSearchBarSlice';\r\n\r\nexport function JobSearchBar() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    /* redux, global states */\r\n    const globalJobFilters = useSelector(selectGlobalJobFilters);\r\n    const globalIsLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    /* local, feature-level states */\r\n    const [jobFilters, setJobFilters] = useState({\r\n        jobType: \"Bounty\",\r\n        amount: 0,\r\n        pay: 50000,\r\n        postedBefore: \"\"\r\n    });\r\n\r\n\r\n    const updateJobType = function (jobTypeParam) {\r\n        setJobFilters({\r\n            ...jobFilters,\r\n            jobType: jobTypeParam\r\n        });\r\n    }\r\n\r\n    const updatePostedDate = function (e) {\r\n        setJobFilters({\r\n            ...jobFilters,\r\n            postedBefore: e.target.value\r\n        });\r\n    }\r\n\r\n    const updateMinAmount = function (e) {\r\n        setJobFilters({\r\n            ...jobFilters,\r\n            amount: e.target.value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n                <Navbar.Brand href=\"#home\">Find available jobs</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\" style={{ paddingLeft: \"5vw\" }}>\r\n                        <Form inline>\r\n\r\n                            <Col style={{ minWidth: \"12vw\" }}>\r\n                                <Form.Label className=\"mr-sm-4\" style={{ color: \"gray\" }}>What kind of job?</Form.Label>\r\n                                <NavDropdown title={jobFilters.jobType} id=\"basic-nav-dropdown\" onSelect={updateJobType}>\r\n                                    <NavDropdown.Item eventKey=\"Hospitalize\">Hospitalize</NavDropdown.Item>\r\n                                    <NavDropdown.Item eventKey=\"Mug\">Mug</NavDropdown.Item>\r\n                                    <NavDropdown.Divider />\r\n                                    <NavDropdown.Item eventKey=\"Bounty reveal\">Bounty reveal</NavDropdown.Item>\r\n                                    <NavDropdown.Item eventKey=\"Bounty\">Bounty</NavDropdown.Item>\r\n                                </NavDropdown>\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <Form.Label className=\"mr-sm-4\" style={{ color: \"gray\" }}>Posted After Date?</Form.Label>\r\n                                <FormControl className=\"mr-sm-4\" type=\"date\" name='posted_after' value={jobFilters.postedBefore} onChange={updatePostedDate} />\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <Form.Label className=\"mr-sm-4\" style={{ color: \"gray\" }}>How many?</Form.Label>\r\n                                <FormControl style={{ width: \"5vw\" }} max=\"99\" value={jobFilters.amount} type=\"number\" className=\"mr-sm-4\" onChange={updateMinAmount} />\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <Form.Label className=\"mr-sm-4\" style={{ color: \"gray\" }}>Minimum Pay?</Form.Label>\r\n                                <FormControl style={{ width: \"8vw\" }} max=\"100000000\" step=\"10000\" value={jobFilters.pay} type=\"number\" className=\"mr-sm-4\" onChange={(e) => {\r\n                                    setJobFilters({\r\n                                        ...jobFilters,\r\n                                        pay: e.target.value\r\n                                    })\r\n                                }} />\r\n                            </Col>\r\n                            <Button onClick={() => { dispatch(searchJobs(jobFilters)) }} variant=\"outline-success\" >Find Jobs!</Button>\r\n                            \r\n                        </Form>\r\n                    </Nav>\r\n                    \r\n                    <Nav style={{ paddingLeft: \"10vw\", minWidth: \"25vw\", paddingRight:\"3vw\" }}>\r\n                        <Row>\r\n                            <Col  style={{ minWidth: \"10vw\"}}>\r\n                                <JobPostView/>\r\n                            </Col>\r\n                            <Col>\r\n                                {globalIsLoggedIn ? <LoggedInView /> : <NotLoggedInView />}\r\n                            </Col>\r\n                        </Row>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n\r\n            </Navbar>\r\n\r\n        </div>\r\n    );\r\n\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const jobListTableSlice = createSlice({\r\n    name: 'jobListTable',\r\n    initialState: {\r\n        \"jobs\":[{\r\n          \"jobType\":\"Mug\",\r\n          \"amount\":5,\r\n          \"targetPlayerName\":\"Transhumanist\",\r\n          \"pay\":50000\r\n        }]\r\n    },\r\n    reducers: {\r\n      getDetails: (state,action) => {\r\n        \r\n      }\r\n    }\r\n  });\r\n\r\nexport const selectJobs = (state) => state.jobListTable.jobs;\r\n\r\nexport const {getDetails} = jobListTableSlice.actions;\r\nexport default jobListTableSlice.reducer;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Container, Card, Button, CardImg, CardTitle, CardText, CardColumns } from 'reactstrap';\r\nimport {\r\n    getDetails,\r\n    selectJobs\r\n} from './JobListTableSlice';\r\n\r\nexport function JobListTable() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    /* redux, global states */\r\n    const globalJobs = useSelector(selectJobs);\r\n\r\n    /* local, feature-level states */\r\n    const [selectedJob, setSelectedJob] = useState(null);\r\n\r\n    return (\r\n        <div style={{ height: \"100%\", background: \"#2d405f\", minHeight:\"100vh\" }}>\r\n            <Container style={{ paddingTop: \"100px\" }}  >\r\n                <CardColumns>\r\n                    { globalJobs.map((job, index) => (\r\n                        <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333' }}>\r\n                            <CardTitle tag=\"h5\">$50,000</CardTitle>\r\n                            <CardText>{job.jobType} {job.targetPlayerName} x {job.amount}</CardText>\r\n                            <CardText>Posted on : 30-03-2021</CardText>\r\n                            <Button>Claim Job !</Button>\r\n                        </Card>    \r\n                    ))}\r\n                </CardColumns>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}","export function SharedCache() {\r\n    return (<></>);\r\n}","import React ,{useEffect} from 'react';\r\nimport './App.css';\r\nimport { JobSearchBar } from './features/job-search-bar/JobSearchBar';\r\nimport { JobListTable } from './features/job-list-table/JobListTable';\r\nimport { SharedCache } from './features/shared-vars/SharedCache';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nfunction App() {\r\n\r\n  useEffect(() => {\r\n    document.title = \"Torn City Services\"\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <SharedCache/>\r\n        <JobSearchBar/>\r\n        <JobListTable/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport jobSearchBarReducer from '../features/job-search-bar/JobSearchBarSlice';\r\nimport jobListTableReducer from '../features/job-list-table/JobListTableSlice';\r\nimport notLoggedInViewReducer from '../features/profile-view/NotLoggedInViewSlice';\r\nimport sharedCacheReducer from '../features/shared-vars/SharedCacheSlice';\r\nimport jobPostViewReducer from '../features/job-post-view/JobPostViewSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    jobSearchBar: jobSearchBarReducer,\r\n    jobListTable: jobListTableReducer,\r\n    notLoggedInView : notLoggedInViewReducer,\r\n    jobPostView : jobPostViewReducer,\r\n    sharedCache: sharedCacheReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}